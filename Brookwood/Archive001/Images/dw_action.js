/*************************************************************************  This code is from Dynamic Web Coding at www.dyn-web.com  Copyright 2002-4 by Sharon Paine   See Terms of Use at www.dyn-web.com/bus/terms.html  regarding conditions under which you may use this code.  This notice must be retained in the code as is!*************************************************************************/// ***sq// this code has been altered so that it slides on a vertical axis// rather than horizontal// and for use with only one button// it wouldn't be difficult to get it to work with the original// number of buttons by adjusting all slideTo calls in the slideEm function// ***// alert('action');// change speed of slide here/*vm added here says undefined otherwise ?? */var slide_in_speed = 600;	// millisecond duration of slide into viewvar slide_out_speed = 500;// millisecond duration of slide out of viewfunction initGlideLayers() {  var glideLyrs = new Array();    // Set up your layers here  // arguments: id, left=0 (offset calculated based on width), top  // ***sq  // set left = 134px and top = 0px  // ***  glideLyrs[0] = new dynObj('glideDiv0', 0, -20);  glideLyrs[1] = new dynObj('glideDiv1', 0, 120);  glideLyrs[2] = new dynObj('glideDiv2', 0, 120);  glideLyrs[3] = new dynObj('glideDiv3', 0, 120);    for (var i=0; glideLyrs[i]; i++) {		// hold original left position		// ***sq		// orig was glideLyrs[i].xOff = -(glideLyrs[i].w - 10)		// - allows to slide downwards at start		// + allows to slide upwards at start		// also changed shifTo call from ...xOff, ...y to ...x, ...yOff		// ***		glideLyrs[i].yOff = -(glideLyrs[i].h);		glideLyrs[i].xOff = (glideLyrs[i].w - 0);		glideLyrs[i].shiftTo( glideLyrs[i].xOff, glideLyrs[i].yOff );		glideLyrs[i].show();  }    if(is_gecko) {slideOut('glideDiv0');} else {slideEm('glideDiv0');}}var curGlideLyr;function slideEm(id) {  var oldLyr, newLyr;  if(is_gecko){  var divElement = document.getElementById(id);divElement.style.display="block";}    // if link for current layer clicked, slide it out of view 	if (curGlideLyr == id) {     oldLyr = dynObj.getInstance(curGlideLyr);    // ***sq    // added 500 to y coordinate so that it would slide down    // into view, rather than retract up and out of view    // added 300 so slide left    // ***	//oldLyr.slideTo(0, -582, slide_in_speed, -1);	if(is_gecko){oldLyr.slideTo(0, oldLyr.yOff, slide_out_speed, -1);}	else {oldLyr.slideTo(0, oldLyr.yOff + 600, slide_out_speed, -1);}    curGlideLyr = ""; 	setContent();	return;   }	// if layer currently in view, set up to slide new one into view	// after current one slides away	if (curGlideLyr) {    oldLyr = dynObj.getInstance(curGlideLyr);		oldLyr.onSlideEnd = function() { 					dynObj.holder[curGlideLyr].slideTo(null, 10, slide_in_speed, -1); 			this.onSlideEnd = function() { if (this.el) this.el = null } 		}		// slide current layer out of view		oldLyr.slideTo(null, oldLyr.yOff, slide_out_speed, -1);	} else { 	// if no layer currently in view    newLyr = dynObj.getInstance(id);    //***sq    // set y coord to -500 so that top = -500px    //***    newLyr.slideTo(-600, -632, slide_in_speed, -1);		if(is_gecko){setTimeout("hideFox();", 700);}	  }	curGlideLyr = id;	}function slideOut(id) {	if (curGlideLyr) {	} else { 	// if no layer currently in view    newLyr = dynObj.getInstance(id);    newLyr.slideTo(-600, -632, slide_in_speed, -1);  }	curGlideLyr = id;}function hideFox(){		 var divElement = document.getElementById(curGlideLyr);divElement.style.display="none";}